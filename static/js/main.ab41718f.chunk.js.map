{"version":3,"sources":["components/Timer/index.js","actions/answerQuestion.js","components/QuestionBoard/index.js","App.js","utils/PersistState.js","reducers/timer.js","reducers/questions.js","reducers/appState.js","reducers/index.js","index.js"],"names":["Timer","time","timer","useSelector","state","className","Math","floor","answerQuestion","type","questionId","answer","QuestionBoard","currQuestion","dispatch","useDispatch","useState","selectedCheckbox","setSelectedCheckbox","useEffect","question","options","map","option","idx","onClick","e","changedTo","target","checked","App","setQuestionId","questions","appState","questionCount","length","style","fontStyle","textAlign","fontSize","score","q","trueOption","toString","calculateScore","key","localStorage","removeItem","console","log","eraseFromStore","timerReducer","action","max","initialState","getQuestions","temporaryValue","randomIndex","array","JSON","parse","stringify","currentIndex","random","questionsReducer","appStateReducer","reducers","combineReducers","store","createStore","getItem","loadStore","window","__REDUX_DEVTOOLS_EXTENSION__","setInterval","getState","subscribe","st","setItem","saveStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ab41718f.chunk.js","sourcesContent":["import React from 'react';\nimport { useSelector } from 'react-redux';\n\nexport default function Timer() {\n  const timer = useSelector(state => state.timer);\n\n  const formatTime = time => {\n    time /= 1000;\n    // formats into mm:ss\n    return `${Math.floor(time / 60)} : ${time % 60}`;\n  }\n\n  return (\n    <>\n      <h1 className=\"timer\">\n        {formatTime(timer)}\n      </h1>\n    </>\n  );\n}","const answerQuestion = ({ questionId, answer }) => {\n  return {\n    type: 'ANSWER_QUESTION',\n    questionId,\n    answer,\n  }\n}\n\nexport default answerQuestion;","import { React, useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport answerQuestion from '../../actions/answerQuestion';\n\nexport default function QuestionBoard({ questionId, currQuestion }) {\n  const dispatch = useDispatch();\n\n  const [selectedCheckbox, setSelectedCheckbox] = useState(-1);\n\n  useEffect(() => {\n    setSelectedCheckbox(currQuestion.answer);\n  }, [questionId, currQuestion]);\n\n  return (\n    <>\n      <div className=\"question-id\">\n        {questionId + 1}\n      </div>\n      <div className=\"question\">\n        {currQuestion.question}\n      </div>\n      <div className=\"answer-grid\">\n        {\n          currQuestion.options.map((option, idx) => (\n            <div key={idx} className={idx === selectedCheckbox ? \"active option\" : \"option\"}\n              onClick={\n                e => {\n                  let changedTo;\n                  if (!e.target.checked && idx === selectedCheckbox) changedTo = -1;\n                  else changedTo = idx;\n                  setSelectedCheckbox(changedTo);\n                  dispatch(answerQuestion({\n                    questionId,\n                    answer: changedTo,\n                  }));\n                }}\n            >\n              {option}\n            </div>\n          ))\n        }\n      </div>\n    </>\n  )\n}","import { React, useState } from 'react';\nimport Timer from './components/Timer'\nimport QuestionBoard from './components/QuestionBoard';\n\nimport { eraseFromStore } from './utils/PersistState';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport './App.css';\n\nfunction App() {\n  const [questionId, setQuestionId] = useState(0);\n  const questions = useSelector(state => state.questions);\n\n  const appState = useSelector(state => state.appState);\n\n  const questionCount = questions.length;\n  const dispatch = useDispatch();\n\n  const calculateScore = () => {\n    // in an actual app, this would be some backend api\n    // mostly handled by the same function which supplies the questions\n    let score = 0;\n    for (const q of questions) {\n      if (q.answer === q.trueOption) score++;\n    }\n    return `${score.toString()}/${questionCount}`;\n  }\n\n  return (\n    <div className=\"container\">\n      {\n        appState === 'READY' &&\n        <div className=\"start-quiz\">\n          <h1 style={{ fontStyle: 'italic', textAlign: 'center' }}>dinskid's arithmetic quiz</h1>\n          <div className=\"rules\">\n            <h7 style={{ fontStyle: 'bold', fontSize: '1rem' }}>How it works?</h7>\n            <ol>\n              <li>\n                You will answer 5 simple arithmetic multiple choice questions\n              </li>\n              <li>\n                You will have 1 minute and 30 seconds to do so\n              </li>\n              <li>\n                You will have to submit at the end to check how you performed\n              </li>\n            </ol>\n            <div className=\"tag\">All the best!</div>\n          </div>\n          <button onClick={() => {\n            dispatch({ type: 'RESET' });\n            dispatch({ type: 'START' });\n          }}>\n            Take me in to the Quiz!\n          </button>\n        </div>\n      }\n      {\n        appState === 'RUNNING' && <div className=\"board\">\n          <Timer />\n          <QuestionBoard questionId={questionId} currQuestion={questions[questionId]} />\n          <div className=\"btn-list\">\n            {questionId !== 0 &&\n              <button\n                onClick={() => {\n                  setQuestionId(questionId - 1);\n                }}>\n                Previous\n            </button>\n            }\n            {\n              questionId !== questionCount - 1 &&\n              <button\n                onClick={() => setQuestionId(questionId + 1)}>\n                Next\n            </button>\n            }\n            {\n              questionId === questionCount - 1 &&\n              <button\n                onClick={() => {\n                  // submit answers\n                  dispatch({ type: 'END' })\n                  dispatch({ type: 'ZERO_TIMER' })\n                  setQuestionId(0);\n                }}>\n                Submit\n          </button>\n            }\n          </div>\n        </div>\n      }\n      {\n        appState === 'ENDED' && <div className=\"end-card\">\n          <h1>Your score</h1>\n          <div className=\"score\">\n            {calculateScore()}\n          </div>\n          <button onClick={() => {\n            dispatch({ type: 'RESET_QUESTIONS' })\n            // delete from local storage\n            eraseFromStore();\n            dispatch({ type: 'RESTART' })\n          }}>\n            Restart\n          </button>\n        </div>\n      }\n    </div >\n  );\n}\n\nexport default App;\n","export const loadStore = () => {\n  try {\n    const store = localStorage.getItem('store');\n    if (store === null) return undefined;\n    return JSON.parse(store);\n  } catch (e) {\n    return undefined;\n  }\n}\n\nexport const saveStore = (store) => {\n  try {\n    localStorage.setItem('store', JSON.stringify(store));\n  } catch (e) {\n    console.log(\"Couldn't save the store to local storage!\");\n    throw e;\n  }\n}\n\nexport const eraseFromStore = (key = 'store') => {\n  try {\n    localStorage.removeItem(key);\n  } catch (e) {\n    console.log(\"Couldn't remove item from the store\");\n    throw e;\n  }\n}","const timerReducer = (state = 60000, action) => {\n  switch (action.type) {\n    case 'DECREMENT':\n      // return state;\n      return Math.max(state - 1000, 0);\n    case 'RESET':\n      return 60000;\n    case 'ZERO_TIMER':\n      return 0;\n    default: return state;\n  }\n}\n\nexport default timerReducer;","const initialState = [\n  {\n    question: '1x9 = ?',\n    options: [\n      '4',\n      '7',\n      '9',\n      '2'\n    ],\n    answer: -1,\n    trueOption: 2\n  },\n  {\n    question: '2x9 = ?',\n    options: [\n      '4',\n      '18',\n      '9',\n      '2'\n    ],\n    answer: -1,\n    trueOption: 1\n  },\n  {\n    question: '3x9 = ?',\n    options: [\n      '4',\n      '27',\n      '9',\n      '2'\n    ],\n    answer: -1,\n    trueOption: 1\n  },\n  {\n    question: '4x9 = ?',\n    options: [\n      '36',\n      '7',\n      '9',\n      '2'\n    ],\n    answer: -1,\n    trueOption: 0\n  },\n  {\n    question: '5x9 = ?',\n    options: [\n      '2',\n      '9',\n      '7',\n      '45'\n    ],\n    answer: -1,\n    trueOption: 3\n  },\n]\n\nconst getQuestions = () => {\n  // shuffle source: https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n  let array = JSON.parse(JSON.stringify(initialState));\n  let currentIndex = array.length, temporaryValue, randomIndex;\n  while (0 !== currentIndex) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n  return array;\n}\n\nconst questionsReducer = (state = getQuestions(), action) => {\n  switch (action.type) {\n    case 'ANSWER_QUESTION': {\n      state[action.questionId].answer = action.answer;\n      return state;\n    }\n    case 'RESET_QUESTIONS': {\n      return getQuestions();\n    }\n    default: return state;\n  }\n}\n\nexport default questionsReducer;","const appStateReducer = (state = 'READY', action) => {\n  switch (action.type) {\n    case 'START': return 'RUNNING';\n    case 'END': return 'ENDED';\n    case 'RESTART': return 'READY';\n    default: return state\n  }\n}\n\nexport default appStateReducer;\n","import { combineReducers } from 'redux';\nimport timerReducer from './timer';\nimport questionsReducer from './questions';\nimport appStateReducer from './appState';\n\nconst reducers = combineReducers({\n  questions: questionsReducer,\n  timer: timerReducer,\n  appState: appStateReducer,\n});\n\nexport default reducers;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\n\nimport { createStore } from 'redux';\nimport reducers from './reducers/index';\nimport { loadStore, saveStore } from './utils/PersistState';\n\n// const store = createStore(reducers);\nconst store = createStore(reducers, loadStore(), window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nsetInterval(() => {\n  if (store.getState().appState === 'RUNNING') {\n    store.dispatch({ type: 'DECREMENT' });\n    if (store.getState().timer === 0) store.dispatch({ type: 'END' });\n  }\n}, 1000);\n\nstore.subscribe(() => {\n  let st = store.getState();\n  if (st.appState === 'RUNNING') saveStore(st);\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}